{"version":3,"sources":["webpack://generator/webpack/bootstrap","webpack://generator/./src/generator.js","webpack://generator/./src/solver.js","webpack://generator/./src/sudoku-core.js"],"names":["generate","difficulty","completedPuzzle","createCompletedPuzzle","numHolesToDig","getNumGivens","digPuzzle","createFixedValsFromState","state","map","row","val","numGivens","initState","newState","addRandomValuesToState","fixedVals","result","completedState","numVals","x","getRandom","y","allowed","getRandomArrayVal","lowerBound","upperBound","Math","floor","random","arr","length","numGivensRanges","min","max","numToDig","undiggableCells","randY","randX","digCell","newUndiggableCells","givenVal","otherVals","filter","every","nextCell","curY","curX","undefined","getValidAllowed","invalidVals","includes","solve","solved","nextY","nextX","allowedVals","console","log","tryVal","concat","newInvalid","invRow","invY","fill","getAdjacentValues","coord","xVals","yVals","squareVals","getValues","getSquareCoords","getSquare","getInitState","fillVal","Array","getAdjacentCoords","xCoords","yCoords","squareCoords","getAllowed","adjacent","adjacentVals","num","arraysAreIdentical","arr1","arr2","isArray","i","isSolved","isValidPuzzle","flatState","reduce","some","checkSolutionIsValid","valsAreValid","slice","sort","rows","cols","squares","square","rowsValid","colsValid","squaresValid","copyState","copy","printState","text","index","rowString","rowText","rowIndex","isValidValue","coordinates","getValue","coordinate","find","squareCoordMap","parseState","inputState"],"mappings":"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AC,CAAD,EAAG,CAAH,CAA/B,EAAqC,CAAC,CAAD,EAAG,CAAH,CAArC,EAA2C,CAAC,CAAD,EAAG,CAAH,CAA3C,EAAiD,CAAC,CAAD,EAAG,CAAH,CAAjD,CARmB;AASrB,KAAE,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,EAAO,CAAC,CAAD,EAAG,CAAH,CAAP,EAAa,CAAC,CAAD,EAAG,CAAH,CAAb,EAAmB,CAAC,CAAD,EAAG,CAAH,CAAnB,EAAyB,CAAC,CAAD,EAAG,CAAH,CAAzB,EAA+B,CAAC,CAAD,EAAG,CAAH,CAA/B,EAAqC,CAAC,CAAD,EAAG,CAAH,CAArC,EAA2C,CAAC,CAAD,EAAG,CAAH,CAA3C,EAAiD,CAAC,CAAD,EAAG,CAAH,CAAjD;AATmB,CAAvB,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,iE","file":"generator.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/generator.js\");\n","import {getAllowed, copyState, getInitState} from './sudoku-core';\nimport solve from './solver';\n\nexport const generate = (difficulty = 'medium') => {\n  const completedPuzzle = createCompletedPuzzle();\n  if (completedPuzzle === false) return generate(difficulty);\n  const numHolesToDig = 81 - getNumGivens(difficulty);\n  return digPuzzle(completedPuzzle, numHolesToDig, getInitState());\n};\n\nconst createFixedValsFromState = (state) => {\n  return state.map(row => row.map(val => val === null ? null : 'fixed'));\n};\n\nconst createCompletedPuzzle = () => {\n  const numGivens = 11;\n  const initState = getInitState();\n  const newState = addRandomValuesToState(initState, numGivens);\n  const fixedVals = createFixedValsFromState(newState);\n  const result = solve(newState, [0,0], getInitState([]), fixedVals);\n  return result.completedState;\n};\n\nfunction addRandomValuesToState(state, numVals = 1) {\n  if (numVals === 0) return state;\n  const x = getRandom(0, 8);\n  const y = getRandom(0, 8);\n  if (state[y][x] !== null) return addRandomValuesToState(state, numVals);  // If already added a value here, try again\n  const allowed = getAllowed(state, [y, x]);\n  state[y][x] = getRandomArrayVal(allowed);\n  return addRandomValuesToState(state, numVals - 1);\n}\n\nconst getRandom = (lowerBound = 1, upperBound = 9) => {\n  return Math.floor(Math.random() * (upperBound - lowerBound + 1)) + lowerBound;\n};\n\nconst getRandomArrayVal = (arr) => {\n  return arr[getRandom(0, arr.length - 1)];\n};\n\nconst getNumGivens = (difficulty) => {\n  const numGivensRanges = {\n    'very_easy': [50, 55],\n    'easy': [36, 49],\n    'medium': [32, 35],\n    'hard': [28, 31],\n    'very_hard': [22, 27],\n  };\n  const [min, max] = numGivensRanges[difficulty];\n  return getRandom(min, max);\n};\n\nfunction digPuzzle(state, numToDig, undiggableCells) {\n  if (numToDig === 0) return state;\n  const randY = getRandom(0, 8);\n  const randX = getRandom(0, 8);\n  if (state[randY][randX] === null || undiggableCells[randY][randX] === true) return digPuzzle(state, numToDig, undiggableCells);\n  const result = digCell(state, [randY, randX]);\n  if (result === false) {\n    const newUndiggableCells = copyState(undiggableCells);\n    newUndiggableCells[randY][randX] = true;\n    return digPuzzle(state, numToDig, newUndiggableCells);\n  }\n  const newState = copyState(state);\n  newState[randY][randX] = null;\n  return digPuzzle(newState, numToDig - 1, undiggableCells);\n}\n\nconst digCell = (state, [y, x]) => {\n  const givenVal = state[y][x];\n  const otherVals = [1,2,3,4,5,6,7,8,9].filter(val => val === givenVal);\n  return otherVals.every(val => {\n    const newState = copyState(state);\n    newState[y][x] = val;\n    return solve(newState, [0, 0], getInitState([]), getInitState()) === false;\n  });\n};\n\n// const prevCell = () => {\n//   if (x === 0 && y === 0) return undefined;\n//   if (x === 0) return [y - 1, 0];\n//   return [y, x - 1];\n// };","import {copyState, getAllowed, printState} from \"./sudoku-core\";\n\nconst nextCell = (curY, curX) => {\n  if (curX === 8 && curY === 8) return undefined;\n  if (curX === 8) return [curY + 1, 0];\n  return [curY, curX + 1];\n};\n\nconst getValidAllowed = (state, [y, x], invalidVals) => {\n  return getAllowed(state, [y, x])\n    .filter(val => !invalidVals[y][x].includes(val));\n};\n\nexport default function solve(state, [y, x], invalidVals, fixedVals) {\n  if (fixedVals[y][x] === 'fixed') {\n    if (y === 8 && x === 8) return {solved: true, completedState: state};\n    const [nextY, nextX] = nextCell(y, x);\n    return solve(state, [nextY, nextX], invalidVals, fixedVals);\n  }\n  const allowedVals = getValidAllowed(state, [y, x], invalidVals);\n  console.log(allowedVals);\n  if (!allowedVals.length) return false;\n  const tryVal = allowedVals[0];  // TODO: randomize which allowedVal we use to prevent bias towards lower numbers\n  let newState = copyState(state);\n  newState[y][x] = tryVal;\n  if (y === 8 && x === 8) return {solved: true, completedState: newState};\n  const [nextY, nextX] = nextCell(y, x);\n  let result = solve(newState, [nextY, nextX], invalidVals, fixedVals);\n  if (typeof result === 'object' && result.solved === true) return result;\n  if (result === false) {\n    invalidVals[y][x] = invalidVals[y][x].concat(tryVal);  // TODO: make immutable\n    const newInvalid = copyState(invalidVals).map((invRow, invY) => {  // Remove old state\n      if (invY > y) return invRow.fill([]);\n      if (invY === y) return invRow.fill([], x + 1);\n      return invRow;\n    });\n    newState = undefined;  // TODO: Test to see if making these undefined actually reduces memory use\n    invalidVals = undefined;\n    result = undefined;\n    return solve(state, [y, x], newInvalid, fixedVals);\n  }\n}","// Returns all of the values in the same row, column, and square of a given coordinate\nexport const getAdjacentValues = (state, coord) => {\n  const [y, x] = coord;\n  const xVals = state[y];\n  const yVals = state.map(row => row[x]);\n  const squareVals = getValues(state, getSquareCoords(getSquare(y, x)));\n  return {x: xVals, y: yVals, squareVals: squareVals};\n};\n\nexport function getInitState(fillVal = null) {\n  return Array(9).fill([]).map(() => [...(Array(9).fill(fillVal))]);\n}\n\n// Returns all of the coordinates in the same row, column, and square of a given coordinate\nexport const getAdjacentCoords = (coord) => {\n  const [y, x] = coord;\n  const xCoords = [0,1,2,3,4,5,6,7,8].map(y => [y, x]).filter(coord => coord[0] !== y);\n  const yCoords = [0,1,2,3,4,5,6,7,8].map(x => [y, x]).filter(coord => coord[1] !== x);\n  const squareCoords = getSquareCoords(getSquare(y, x))\n    .filter(coord => coord[0] !== y || coord[1] !== x);\n  return {x: xCoords, y: yCoords, squareCoords: squareCoords};\n};\n\nexport const getAllowed = (state, coord) => {\n  const adjacent = getAdjacentValues(state, coord);\n  const adjacentVals = [].concat(adjacent.x, adjacent.y, adjacent.squareVals);\n  return [1,2,3,4,5,6,7,8,9].filter(num => {\n    return !adjacentVals.includes(num);\n  });\n};\n\nexport const arraysAreIdentical = (arr1, arr2) => {\n  if (!Array.isArray(arr1) || !Array.isArray(arr2)) return undefined;\n  if (arr1.length !== arr2.length) return false;\n\n  for (let i = arr1.length; i--;) {\n    if (Array.isArray(arr1[i]) || Array.isArray(arr2[i])) {\n      if (!arraysAreIdentical(arr1[i], arr2[i])) {\n        return false;\n      }\n    } else if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const isSolved = (state) => ![].concat(...state).includes(null);\n\nexport const isValidPuzzle = (state) => {\n  const flatState = state.reduce((flatState, row) => flatState.concat(row), []);\n  if (!flatState.includes(null)) return false;  // a valid puzzle must have at least one blank cell\n  return state.some((row, y) => {  // return whether any cell values are not allowed for their coordinate\n    return row.some((val, x) => !getAllowed(state, [y, x]).includes(val));\n  })\n};\n\nexport const checkSolutionIsValid = (state) => {\n  const valsAreValid = (arr) => {\n    return arraysAreIdentical([1,2,3,4,5,6,7,8,9], arr.slice().sort());\n  };\n\n  const rows = state;\n  const cols = [0,1,2,3,4,5,6,7,8].map(x => state.map(row => row[x]));\n  const squares = [1,2,3,4,5,6,7,8,9].map(square => getValues(state, getSquareCoords(square)));\n\n  const rowsValid = rows.every(valsAreValid);\n  const colsValid = cols.every(valsAreValid);\n  const squaresValid = squares.every(valsAreValid);\n\n  return rowsValid && colsValid && squaresValid;\n};\n\n// const copyState = (state)  => state.map(arr => [...arr]);\nexport function copyState(state) {\n  // if (Array.isArray(state)) return state.slice().map(val => copyState(val));\n  // Switched to FOR loop for performance\n  let i, copy;\n  if (Array.isArray(state)) {\n    copy = state.slice();\n    for (i = 0; i < copy.length; i++) {\n      copy[i] = copyState(copy[i]);\n    }\n    return copy;\n  }\n  if (state !== null && typeof state === 'object') return false;  // You can't clone an object this way\n  return state;\n}\n\nexport const printState = (state) => {\n  return state.reduce((text, row, index) => {\n    if (index === 3 || index === 6) {\n      text = text.concat(\"\\n\");  // Add horizontal spacing\n    }\n    const rowString = row.reduce((rowText, val, rowIndex) => {\n      val = val === null ? '_' : val;\n      if (rowIndex === 3 || rowIndex === 6) {\n        rowText = rowText.concat(' ');  // Add vertical spacing\n      }\n      return rowText.concat(' ' + val);\n    }, '');\n    return text.concat(\"|\" + rowString + \" |\\n\");\n  }, '');\n};\n\nconst isValidValue = (val) => [1,2,3,4,5,6,7,8,9].includes(val);\n\nconst getValues = (state, coordinates) => {\n  return coordinates.map(coord => getValue(state, coord));\n};\n\n// Get the value of a given coordinate from the given puzzle state\nconst getValue = (state, coordinate) => state[coordinate[0]][coordinate[1]];\n\n// Get the square (1 through 9) that contains the given coordinates\n// TODO: Consider caching square/coordinate maps to save performance\nconst getSquare = (y, x) => {\n  return [1,2,3,4,5,6,7,8,9].find(square => {\n    return getSquareCoords(square).some(coord => {\n      return arraysAreIdentical(coord, [y, x]);\n    });\n  });\n};\n\n// Get the coordinates contained within in a given square (1 through 9)\nconst getSquareCoords = (square) => {\n  return squareCoordMap[square];\n};\n\nexport const parseState = (inputState) => {\n  return inputState.map(row => {\n    return row.map(val => isValidValue(val) ? val : null);\n  });\n};\n\n// Map of squares to the coordinates they contain\nconst squareCoordMap = {\n  1:[[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]],\n  2:[[0,3],[0,4],[0,5],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5]],\n  3:[[0,6],[0,7],[0,8],[1,6],[1,7],[1,8],[2,6],[2,7],[2,8]],\n  4:[[3,0],[3,1],[3,2],[4,0],[4,1],[4,2],[5,0],[5,1],[5,2]],\n  5:[[3,3],[3,4],[3,5],[4,3],[4,4],[4,5],[5,3],[5,4],[5,5]],\n  6:[[3,6],[3,7],[3,8],[4,6],[4,7],[4,8],[5,6],[5,7],[5,8]],\n  7:[[6,0],[6,1],[6,2],[7,0],[7,1],[7,2],[8,0],[8,1],[8,2]],\n  8:[[6,3],[6,4],[6,5],[7,3],[7,4],[7,5],[8,3],[8,4],[8,5]],\n  9:[[6,6],[6,7],[6,8],[7,6],[7,7],[7,8],[8,6],[8,7],[8,8]],\n};\n\n// // If first array contains second array\n// const arrayContainsArray = (containerArray, array) => {\n//   return containerArray\n//     .filter((item) => {\n//       return (\n//         Array.isArray(item) &&\n//         arrayIntersect(item, array).length === array.length\n//       );\n//     })\n//     .length > 0;\n// };\n\n// const arrayIntersect = (...arrs) => {\n//   return arrs.reduce((intersecting, arr) => {\n//     const set1 = new Set(intersecting), set2 = new Set(arr);\n//     return [...set1].filter(val => set2.has(val));\n//   }, arrs.pop());\n// };\n\n\n// const getXAllowed = (state, coord) => {\n//   const adjacent = getAdjacentValues(state, coord);\n//   return [1,2,3,4,5,6,7,8,9].filter(num => {\n//     return !adjacent.x.includes(num);\n//   });\n// };\n// const getYAllowed = (state, coord) => {\n//   const adjacent = getAdjacentValues(state, coord);\n//   return [1,2,3,4,5,6,7,8,9].filter(num => {\n//     return !adjacent.y.includes(num);\n//   });\n// };\n// const getSquareAllowed = (state, coord) => {\n//   const adjacent = getAdjacentValues(state, coord);\n//   return [1,2,3,4,5,6,7,8,9].filter(num => {\n//     return !adjacent.squareVals.includes(num);\n//   });\n// };\n\n// const getOptions = (state, coord) => {\n//   let allowed = getAllowed(state, coord);\n//   const adjCoordsInc = getAdjacentCoordsInclusive(coord);  // Get adjacent coordinates, both num and null\n//   const xMatching = findMatching(state, adjCoordsInc.x);\n//   const yMatching = findMatching(state, adjCoordsInc.y);\n//   const squareMatching = findMatching(state, adjCoordsInc.squareCoords);\n//\n//   [].concat(xMatching, yMatching, squareMatching).forEach(match => {\n//     if (!arraysAreIdentical(allowed, match)) {\n//       allowed = allowed.filter(val => !match.includes(val));\n//     }\n//   });\n//   return allowed;\n// };\n\n// const findMatching = (state, adjacent) => {\n//   const xNullCoords = filterNullCoords(state, adjacent, true);  // Null adjacent coordinates\n//   const xExistingVals = getValues(state, filterNullCoords(state, adjacent));  // Non-null values\n//   const xNonExistingVals = [1,2,3,4,5,6,7,8,9].filter(num => !xExistingVals.includes(num));  // Vals not in X yet\n//   const xEval = xNullCoords.map(coord => ({\n//     coord: coord,\n//     available: xNonExistingVals,\n//     options: getAllowed(state, coord),  // Legal values for coord\n//   }));\n//   return xEval.reduce((matching, coord) => {\n//     // Get all OTHER coords with matching options\n//     const matchingOps = xEval\n//       .filter(otherCoord => {\n//         return arraysAreIdentical(coord.options, otherCoord.options) &&\n//           !arraysAreIdentical(coord.coord, otherCoord.coord);\n//       });\n//\n//     if (matchingOps.length === coord.options.length - 1 &&\n//       !arrayContainsArray(matching, coord.options)) {\n//       return matching.concat([coord.options]);\n//     }\n//     return matching;\n//   }, []);\n// };\n\n// // Same as getAdjacentCoords but includes given coordinate\n// const getAdjacentCoordsInclusive = (coord) => {\n//   const [y, x] = coord;\n//   const xCoords = [0,1,2,3,4,5,6,7,8].map(y => [y, x]);\n//   const yCoords = [0,1,2,3,4,5,6,7,8].map(x => [y, x]);\n//   const squareCoords = getSquareCoords(getSquare(y, x));\n//   return {x: xCoords, y: yCoords, squareCoords: squareCoords};\n// };\n\n// const filterNullCoords = (state, coords, onlyNulls = false) => {\n//   if (onlyNulls) {\n//     return coords.filter(coord => getValue(state, coord) === null);\n//   }\n//   return coords.filter(coord => getValue(state, coord) !== null);\n// };\n\n// const getUniqueValues = (array) => Array.from(new Set(array));"],"sourceRoot":""}